#ifndef DS1603DA_H
#define DS1603DA_H

#include "common.h"
#include <ModbusMaster.h>
#include <SoftwareSerial.h>
#include "device.h"

struct gas{
  int level;
  float percentage;
};

class DS1603DA : public Device { 
    private: 
        struct gas gas_state;
        int slaveID;//0xb1

        char topic_sensor[45];
        char topic_state[45];
        char uniqid[5];
        char entityname[11];

        bool isSuccess;

    public: 
        DS1603DA(PubSubClient *mqttClient, ModbusMaster *_modbus, SoftwareSerial *_serial, int _slaveId);
        virtual int publish_switch();
        virtual int publish_data();
        
        virtual int update_data();//updateRealtimeState
        virtual int update_switch();//updateSwitchState

        virtual int change_switch(const char* switch_name, const char* onoff);//putSwitchState
        virtual const char* getDeviceName();
        virtual int setup_entity();
};

/*


	Slave ID	Func ID	Addr		Count		Checksum			FC03	Slave ID	Func ID	Count	Data		Data		Checksum		FC03 : ReadHoldingRegisters / FC06 : WriteSingleRegister
실제 값 읽기	0x01	0x03	0x00	0x01	0x00	0x01	0xD5	0xCA			0x01	0x03	0x02	0x00	0xD2			0x38	0x19	1. 주소 0X01 (실시간 값)에서 레지스터 값을 읽고 반환 값은 0x00D2입니다.
보정 값 읽기	0x01	0x03	0x00	0x00	0x00	0x02	0xC4	0x0B			0x01	0x03	0x04	0x00	0xDC	0x00	0xDD	0xFB	0x90	2. 주소 0X00, 처리 값 및 실시간 값에서 두 데이터를 읽고 데이터 처리 값을 0x00DC, real로 반환합니다. 시간 값은 0x00DD입니다.
매질 오일로 설정	0x01	0x06	0x00	0x05	0x00	0x02	0x18	0x0A			0x01	0x06	0x00	0x05	0x00	0x02		0x18	0x0A	3. 데이터 0x02를 주소 0x05에 쓰고 측정 매체는 오일입니다.
읽을 시간 10초	0x01	0x06	0x00	0x06	0x00	0x0A	0xE9	0xCC			0x01	0x06	0x00	0x06	0x00	0x0A		0xE9	0xCC	4. 데이터 0x0A를 주소 0x06에 쓰고 듀티 사이클을 10 초로 변경합니다.
Slave ID 설정	0x01	0x06	0x00	0x04	0x00	0x02	0x49	0xCA			0x01	0x06	0x00	0x04	0x00	0x02		0x49	0xCA	5. 데이터 0X02를 주소 0X04에 쓰고 슬레이브 주소를 0x02로 설정합니다.
	0x02	0x03	0x00	0x01	0x00	0x01	0xD5	0xF9			0x02	0x03	0x02	0x00	0x82			0x7C	0x25	6. 슬레이브 주소를 변경 한 후 주소 0X01 (실시간 값), 0x0082에서 레지스터 값 읽기
	0x02	0x06	0x00	0x06	0x00	0x01	0xA8	0x38			0x02	0x06	0x00	0x06	0x00	0x01		0xA8	0x38	7. 슬레이브 주소를 변경 한 후 데이터 0x01을 주소 0x06에 쓰고 듀티 사이클을 1 초로 변경합니다.
										FC06	echo								



				Modbus 읽기 기능 주소 계획, 기능 코드 : 0X03																
				상태	주소 등록	등록 정보	기술													
				읽기 전용	0x00	보정 된 값	측정 값은 가공 값, 단위 1mm													
				읽기 전용	0x01	실제 값	실시간 측정 값, 단위 1mm													
																				
				Modbus 쓰기 기능 주소 계획, 기능 코드 : 0X06																
				읽고 쓰기	0x04	슬레이브 주소	"Modbus 슬레이브 주소
기본값은 0X01, 범위 0X01 ~ 0XF7, 전원을 끌 때 저장"													
				읽고 쓰기	0x05	측정 매체 설정	"0x01 : 물 0x02 : 기름
다른 값은 유효하지 않습니다. 기본값 0x01"													
				읽고 쓰기	0x06	듀티 사이클 설정	"프로브의 작동 속도를 N 초에 한 번 작동하도록 설정하고 N 값은 다음과 같습니다.
0x01 ~ 0x3C, 초 단위, 기본값은 0x02입니다."																

                
                												
실제 시나리오																				
																				
Device 1 Connect																				
Slave ID 설정	0x01	0x06	0x00	0x04	0x00	0xb1					WriteSingleRegister(0x04, 0xb1);									
읽을 시간 10초	0xb1	0x06	0x00	0x06	0x00	0x0A					WriteSingleRegister(0x06, 0x0A);									
Device 2 Connect																				
Slave ID 설정	0x01	0x06	0x00	0x04	0x00	0xb2					WriteSingleRegister(0x04, 0xb2);									
읽을 시간 10초	0xb2	0x06	0x00	0x06	0x00	0x0A					WriteSingleRegister(0x06, 0x0A);									
																				
																				
실제 값 읽기	0xb1	0x03	0x00	0x00	0x00	0x02					ReadHoldingRegisters(0x00, 0x02);									
	0xb1	0x03	0x04	0x00	0xDC	0x00	0xDD				Int level[0] = getResponseBuffer(0);									
	0xb2	0x03	0x00	0x00	0x00	0x02					ReadHoldingRegisters(0x00, 0x02);									
	0xb2	0x03	0x04	0x00	0xDC	0x00	0xDD				Int level[1] = getResponseBuffer(0);									


*/

#endif
